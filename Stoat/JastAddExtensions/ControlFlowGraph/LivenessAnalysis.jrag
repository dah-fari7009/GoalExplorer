aspect LivenessAnalysis {	
/*
	// Define the in and out attributes

	syn BitSet<Stmt> Stmt.in() circular [empty()];
	eq Stmt.in() = use().union(out().compl(def()));
	
	coll BitSet<Stmt> Stmt.out() circular [empty().mutable()] with add root BodyDecl;
	Stmt contributes in() to Stmt.out() for each pred();
	
	*/
	
	// My implementation
	
	syn BitSet CFGNode.in() circular [empty()];

	eq Stmt.in() = use().union(out().compl(def()));
	eq Expr.in() = use().union(out().compl(def()));

	// EN: Need equations for all node types implementing the CFNode interface
	eq ParameterDeclaration.in() = empty();
//	eq Modifiers.in() = empty();
//	eq TypeDecl.in() = empty();
	eq FieldDeclaration.in() = empty(); 
	
	coll BitSet CFGNode.out() circular [empty().mutable()] with add root BodyDecl;
	Stmt contributes in() to CFGNode.out() for each pred();
	Expr contributes in() to CFGNode.out() for each pred();
	
	
}
