/*
 * The JastAdd Extensible Java Compiler (http://jastadd.org) is covered
 * by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 * 
 * Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 */

aspect Glue {
  // defined in Patterns.jrag
  eq DeclarePrecedence.getPattern().nameType() = NameType.TYPE_NAME;

  eq DeclareParentsExtends.getPattern().nameType() = NameType.TYPE_NAME;
  eq DeclareParentsExtends.getTypeAccess().nameType() = NameType.TYPE_NAME;

  eq DeclareParentsImplements.getPattern().nameType() = NameType.TYPE_NAME;
  eq DeclareParentsImplements.getTypeAccess().nameType() = NameType.TYPE_NAME;

  syn boolean Access.matchesType(TypeDecl t) = type() == t;


  refine IntertypeConstructorNameAnalysis eq SuperConstructorAccess.decls()
  to refine MethodSignature15 eq SuperConstructorAccess.decls() {
    Collection c = hasPrevExpr() && !prevExpr().isTypeAccess() ?
      thisType().lookupSuperConstructor() : lookupSuperConstructor();
    return chooseConstructor(c, getArgList());
  }

  refine GenericsTypeCheck public void TypeDecl.typeCheck()
  to refine IntertypeMethodErrorCheck public void TypeDecl.typeCheck() {
    refined();
    ArrayList list = new ArrayList();
    list.addAll(implementedInterfaces());
    for(int i = 0; i < list.size(); i++) {
      InterfaceDecl decl = (InterfaceDecl)list.get(i);
      if(decl instanceof ParInterfaceDecl) {
        ParInterfaceDecl p = (ParInterfaceDecl)decl;
        for(Iterator i2 = list.listIterator(i); i2.hasNext(); ) {
          InterfaceDecl decl2 = (InterfaceDecl)i2.next();
          if(decl2 instanceof ParInterfaceDecl) {
            ParInterfaceDecl q = (ParInterfaceDecl)decl2;
            if(p != q && p.genericDecl() == q.genericDecl() && !p.sameArgument(q))
              error(p.genericDecl().name() + " cannot be inherited with different arguments: " +
                p.typeName() + " and " + q.typeName());
          }
        }
      }
    }
  }

  refine GenericsTypeAnalysis eq ThisAccess.decl()
  to refine IntertypeConstructorNameAnalysis eq ThisAccess.decl() {
    TypeDecl typeDecl = refined();
    if(typeDecl instanceof ParTypeDecl)
      typeDecl = ((ParTypeDecl)typeDecl).genericDecl();
    return typeDecl;
  }

  refine GenericsTypeAnalysis eq SuperAccess.decl() 
  to refine IntertypeConstructorNameAnalysis eq SuperAccess.decl() {
    TypeDecl typeDecl = refined();
    if(typeDecl instanceof ParTypeDecl)
      typeDecl = ((ParTypeDecl)typeDecl).genericDecl();
    return typeDecl;
  }

  refine IntertypeMethodNameAnalysis eq ClassDecl.methodsSignatureMap()
  to refine MethodSignature15 eq ClassDecl.methodsSignatureMap() {
    HashMap map = new HashMap(localMethodsSignatureMap());
    if(hasSuperclass()) {
      // we only inherit methods that are not overridden locally
      for(Iterator iter = superclass().methodsIterator(); iter.hasNext(); ) {
        MethodDecl m = (MethodDecl)iter.next();
        if(m instanceof IntertypeMethodDecl) {
          if(m.isPrivate()) {
            boolean found = false;
            for(Iterator i2 = localMethodsSignature(m.signature()).iterator(); i2.hasNext(); ) {
              MethodDecl n = (MethodDecl)i2.next();
              // a private method m introduced from an aspect may be overridden by other
              // private methods in another aspect if both aspects share the same top level type
              if(n.isPrivate() && n instanceof IntertypeMethodDecl && 
                 ((IntertypeMethodDecl)n).hostAspect().topLevelType() == ((IntertypeMethodDecl)m).hostAspect().topLevelType())
                found = true;
            }
            if(!found)
              putSimpleSetElement(map, m.signature(), m);
          }
          // public or package protected methods from aspects are inherited
          // we don't want to discard methods that are visible in aspects
          // just because they are not visible in the introduced type
          else if(!localMethodsSignatureMap().containsKey(m.signature())) {
            putSimpleSetElement(map, m.signature(), m);
          }
        }
        // methods from ordinary classes are inherited if they are accessible and not private
        else if(!m.isPrivate() && m.accessibleFrom(this) && !localMethodsSignatureMap().containsKey(m.signature())) {
          if(!(m instanceof MethodDeclSubstituted) || !localMethodsSignatureMap().containsKey(m.sourceMethodDecl().signature()))
            putSimpleSetElement(map, m.signature(), m);
        }
      }
    }
    for(Iterator outerIter = interfacesIterator(); outerIter.hasNext(); ) {
      TypeDecl typeDecl = (TypeDecl)outerIter.next();
      for(Iterator iter = typeDecl.methodsIterator(); iter.hasNext(); ) {
        MethodDecl m = (MethodDecl)iter.next();
        // include methods inherited through interfaces
        if(m instanceof IntertypeMethodDecl) {
          if(m.isPrivate()) {
            boolean found = false;
            for(Iterator i2 = localMethodsSignature(m.signature()).iterator(); i2.hasNext(); ) {
              MethodDecl n = (MethodDecl)i2.next();
              if(n.isPrivate() && n.hostType().topLevelType() == m.hostType().topLevelType())
                found = true;
            }
            if(!found)
              putSimpleSetElement(map, m.signature(), m);
          }
          else if(!localMethodsSignatureMap().containsKey(m.signature())) {
            SimpleSet set = map.containsKey(m.signature()) ? (SimpleSet)map.get(m.signature()) : SimpleSet.emptySet;
            // check if decl is zapped and therefore not to be included 
            boolean zapped = false;
            for(Iterator i2 = set.iterator(); !zapped && i2.hasNext(); ) {
              MethodDecl decl = (MethodDecl)i2.next();
              zapped = decl.zaps(m);
            }
            if(!zapped) {
              SimpleSet newSet = SimpleSet.emptySet.add(m);
              // remove all methods zapped by this method
              for(Iterator i2 = set.iterator(); i2.hasNext(); ) {
                MethodDecl decl = (MethodDecl)i2.next();
                if(!m.zaps(decl))
                  newSet = newSet.add(decl);
              }
              set = newSet;
            }
            map.put(m.signature(), set);
          }
        }
        else if(!m.isPrivate() && m.accessibleFrom(this) && !localMethodsSignatureMap().containsKey(m.signature())) {
          if(!(m instanceof MethodDeclSubstituted) || !localMethodsSignatureMap().containsKey(m.sourceMethodDecl().signature())) {

            if(!m.isAbstract() || allMethodsAbstract((SimpleSet)map.get(m.signature()))) {
              if(m.isAbstract() || !m.hostType().isObject())
                putSimpleSetElement(map, m.signature(), m);
            }
          }
        }
      }
    }
    return map;
  }

  refine IntertypeConstructorNameAnalysis eq IntertypeConstructorDecl.introducedType() {
    return refined().sourceTypeDecl();
  }
  refine IntertypeFieldNameAnalysis eq IntertypeFieldDeclaration.introducedType() {
    return refined().sourceTypeDecl();
  }
  refine IntertypeMethodNameAnalysis eq IntertypeMethodDecl.introducedType() {
    return refined().sourceTypeDecl();
  }


}
